#!/bin/bash
# Author: Khashayar Aryanmehr [khashayar.aryanmehr@live.com]
# Open-source under MIT License

# read first arg as the command[CMD]
CMD=$1
shift 1
while [ True ]; do
        if [ "$1" = "--http" ]; then
                ARGS_http=$2
                shift 2
        elif [ "$1" = "--https" ]; then
                ARGS_https=$2
                shift 2
        elif [ "$1" = "--ftp" ]; then
                ARGS_ftp=$2
                shift 2
        else
                break
        fi
done

# set https and ftp and socks to http if they are not set
ARGS_https="${ARGS_https:=$ARGS_http}"
ARGS_ftp="${ARGS_ftp:=$ARGS_http}"
ARGS_socks="${ARGS_socks:=$ARGS_http}"

removeExistingBashrcConf () {
        # Remove the init command from .bashrc
        sed -i '/source\ ~\/.proxy-switch\/px\ init/d' ~/.bashrc
}
writeBashrcConf () {
        # Write the init command to .bashrc so new shells have their env vars set
        echo "source ~/.proxy-switch/px init" >> ~/.bashrc
}
applyConf () {
        echo "Applying config from ~/.proxy-switch/.saved.env"
        set -a
        source ~/.proxy-switch/.saved.env
        set +x
}
saveConf () {
# save env var values for later toggles
        mkdir -p ~/.proxy-switch
        CONF_TMP="
export http_proxy=$ARGS_http
export https_proxy=$ARGS_https
export ftp_proxy=$ARGS_ftp
export socks_proxy=$ARGS_socks
export no_proxy=localhost,127.0.0.1
export HTTP_PROXY=$ARGS_http
export HTTPS_PROXY=$ARGS_https
export FTP_PROXY=$ARGS_ftp
export SOCKS_PTOXY=$ARGS_socks
export NO_PROXY=localhost,127.0.0.1"
        echo "$CONF_TMP" > ~/.proxy-switch/.saved.env
        removeExistingBashrcConf
        writeBashrcConf
}
clearConf () {
        echo "" > ~/.proxy-switch/.saved.env
}
unsetProxy () {
        unset http_proxy
        unset http_proxy
        unset https_proxy
        unset ftp_proxy
        unset socks_proxy
        unset no_proxy
        unset HTTP_PROXY
        unset HTTPS_PROXY
        unset FTP_PROXY
        unset SOCKS_PROXY
        unset NO_PROXY
}
toggleProxy () {
        MODE="$(gsettings get org.gnome.system.proxy mode)"
        if [[ $MODE =~ "none" ]]
        then
                gsettings set org.gnome.system.proxy mode 'manual'
                applyConf
                notify-send -i "info" 'Proxy toggled' 'Turned On'
        elif [[ $MODE =~ "manual" ]]
        then
                gsettings set org.gnome.system.proxy mode 'none'
                unsetProxy
                notify-send -i "info" 'Proxy toggled' 'Turned Off'
        fi
}
init () {
        MODE="$(gsettings get org.gnome.system.proxy mode)"
        if [[ $MODE =~ "none" ]]
        then
                unsetProxy
                notify-send -i "info" 'Proxy State' 'Off'
        elif [[ $MODE =~ "manual" ]]
        then
                applyConf
                notify-send -i "info" 'Proxy State' 'On'
        fi
}

# Match command [$CMD]
if [[ $CMD == "on" ]]
then
        # set gnome system proxy mode to 'manual' and apply saved env variables
        gsettings set org.gnome.system.proxy mode 'manual'
        applyConf
elif [[ $CMD == "off" ]]
then
        # set gnome system proxy mode to 'none'
        gsettings set org.gnome.system.proxy mode 'none'
elif [[ $CMD == "toggle" || $CMD == "t" ]]
then
        # toggle gnome system proxy mode between 'none' and 'manual'
        toggleProxy
elif [[ $CMD == "init" ]]
then
        # initialize env vars on new shells
        init
elif [[ $CMD == "set" ]]
then
        # save and apply the newly provided config [--http,--https,--ftp,--socks]
        # and set gnome proxy mode to 'manual'
        # this also writes the config to ~/.bashrc
        saveConf
        applyConf
        gsettings set org.gnome.system.proxy mode 'manual'
elif [[ $CMD == "unset" ]]
then
        # unset env variables and set gnome proxy mode to 'none'
        unsetProxy
        gsettings set org.gnome.system.proxy mode 'none'
elif [[ $CMD == "clear" ]]
then
        # remove config from .saved.env
        clearConf
fi

